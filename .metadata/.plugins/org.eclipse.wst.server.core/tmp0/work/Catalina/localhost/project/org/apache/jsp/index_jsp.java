/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.12
 * Generated at: 2023-12-05 07:51:02 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import project.SleepCalculator;
import project.CaloriesCalculator;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("project.SleepCalculator");
    _jspx_imports_classes.add("project.CaloriesCalculator");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("    <title>Your Health Dashboard</title>\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Kanit\">\r\n");
      out.write("    <link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\">\r\n");
      out.write("    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\r\n");
      out.write("    <script>\r\n");
      out.write("    // Use fetch to trigger the SleepAnalyticsServlet on page load\r\n");
      out.write("function fetchSleepAnalytics() {\r\n");
      out.write("    fetch('SleepAnalyticsServlet')\r\n");
      out.write("        .then(response => response.text())\r\n");
      out.write("        .then(data => {\r\n");
      out.write("            // Optional: You can add logic to update the UI based on the response from the servlet\r\n");
      out.write("            console.log(data);\r\n");
      out.write("        })\r\n");
      out.write("        .catch(error => {\r\n");
      out.write("            console.error('Error:', error);\r\n");
      out.write("        });\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("        function submitForm() {\r\n");
      out.write("            var inputValue = document.getElementById(\"inputValue\").value;\r\n");
      out.write("\r\n");
      out.write("            fetch('SaveToDatabaseServlet', {\r\n");
      out.write("                method: 'POST',\r\n");
      out.write("                headers: {\r\n");
      out.write("                    'Content-Type': 'application/x-www-form-urlencoded',\r\n");
      out.write("                },\r\n");
      out.write("                body: 'inputValue=' + encodeURIComponent(inputValue),\r\n");
      out.write("            })\r\n");
      out.write("            .then(response => response.json())\r\n");
      out.write("            .then(data => {\r\n");
      out.write("                alert(data.message);\r\n");
      out.write("                if (data.recordAdded) {\r\n");
      out.write("                    alert('Record added successfully!');\r\n");
      out.write("                }\r\n");
      out.write("            })\r\n");
      out.write("            .catch(error => {\r\n");
      out.write("                console.error('Error:', error);\r\n");
      out.write("            });\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        function redirectToAddRecordPage() {\r\n");
      out.write("            window.location.href = 'addrecord.jsp';\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        // Function to fetch data and create the pie chart\r\n");
      out.write("  function createMoodChart() {\r\n");
      out.write("            fetch('MoodChartDataServlet') // Assuming you create a servlet to provide data\r\n");
      out.write("                .then(response => response.json())\r\n");
      out.write("                .then(data => {\r\n");
      out.write("                    var ctx = document.getElementById('moodChart').getContext('2d');\r\n");
      out.write("\r\n");
      out.write("                    // Add title element with an ID\r\n");
      out.write("                    var title = document.createElement('div');\r\n");
      out.write("                    title.id = 'moodChartTitle';\r\n");
      out.write("                    title.textContent = 'Mood Distribution'; // Add your desired title here\r\n");
      out.write("                    document.querySelector('.piechart').appendChild(title);\r\n");
      out.write("\r\n");
      out.write("                    // Define a gradient for each color\r\n");
      out.write("                    var gradient1 = ctx.createLinearGradient(0, 0, 0, 100);\r\n");
      out.write("                    gradient1.addColorStop(0, '#58db58');\r\n");
      out.write("                    gradient1.addColorStop(1, '#4cb04c');\r\n");
      out.write("\r\n");
      out.write("                    var gradient2 = ctx.createLinearGradient(0, 0, 0, 100);\r\n");
      out.write("                    gradient2.addColorStop(0, '#db5858');\r\n");
      out.write("                    gradient2.addColorStop(1, '#ba6363');\r\n");
      out.write("\r\n");
      out.write("                    var gradient3 = ctx.createLinearGradient(0, 0, 0, 100);\r\n");
      out.write("                    gradient3.addColorStop(0, '#b0971e');\r\n");
      out.write("                    gradient3.addColorStop(1, '#b8a448');\r\n");
      out.write("\r\n");
      out.write("                    new Chart(ctx, {\r\n");
      out.write("                        type: 'pie',\r\n");
      out.write("                        data: {\r\n");
      out.write("                            labels: data.labels,\r\n");
      out.write("                            datasets: [{\r\n");
      out.write("                                data: data.values,\r\n");
      out.write("                                backgroundColor: [gradient1, gradient2, gradient3], // Use gradients\r\n");
      out.write("                                borderWidth: 0, // Remove border\r\n");
      out.write("                                fontColor: 'white',\r\n");
      out.write("                            }]\r\n");
      out.write("                        },\r\n");
      out.write("                        options: {\r\n");
      out.write("                            legend: {\r\n");
      out.write("                                display: false, // Hide the legend\r\n");
      out.write("                            }\r\n");
      out.write("                        },\r\n");
      out.write("                    });\r\n");
      out.write("                })\r\n");
      out.write("                .catch(error => {\r\n");
      out.write("                    console.error('Error:', error);\r\n");
      out.write("                });\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("// Call the function when the page loads\r\n");
      out.write("window.onload = function() {\r\n");
      out.write("    createMoodChart();\r\n");
      out.write("    fetchSleepAnalytics();\r\n");
      out.write("};\r\n");
      out.write("\r\n");
      out.write("    </script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    <br>\r\n");
      out.write("    <header>\r\n");
      out.write("        <h1>YOUR HEALTH DASHBOARD</h1>\r\n");
      out.write("    </header>\r\n");
      out.write("    <main>\r\n");
      out.write("        <div>\r\n");
      out.write("            <form class=\"container\" onsubmit=\"submitForm(); return false;\" method=\"post\">\r\n");
      out.write("                <input id=\"inputValue\" name=\"inputValue\" class=\"moodenter\" type=\"text\" placeholder=\"How are you feeling?\" required>	\r\n");
      out.write("                <button type=\"submit\" class=\"tb\">SUBMIT</button>\r\n");
      out.write("            </form>\r\n");
      out.write("        </div>\r\n");
      out.write("<!-- New container for analytics -->\r\n");
      out.write("<div class=\"container\" style=\"margin-top:-20px\">\r\n");
      out.write("    <div class=\"analytics-container\">\r\n");
      out.write("        <div class=\"analytics\">\r\n");
      out.write("            <div class=\"piechart\">\r\n");
      out.write("                <canvas id=\"moodChart\" width=\"400\" height=\"200\"></canvas>\r\n");
      out.write("            </div>\r\n");
      out.write("            <div class=\"graphs\">\r\n");
      out.write("                <!-- Example card -->\r\n");
      out.write("                <div class=\"data-card\">\r\n");
      out.write("                    <h3>Data Card 1</h3>\r\n");
      out.write("                    <!-- Add content here -->\r\n");
      out.write("                </div>\r\n");
      out.write("                <!-- Example card -->\r\n");
      out.write("    <div class=\"data-card\">\r\n");
      out.write("        <div class=\"icon-container\">\r\n");
      out.write("            <!-- Use a sleep icon on the left -->\r\n");
      out.write("            <img src=\"sleep_icon.png\" alt=\"Sleep Icon\" class=\"icon\">\r\n");
      out.write("        </div>\r\n");
      out.write("        <div class=\"count-container\">\r\n");
      out.write("        <h3>This week, You slept</h3>\r\n");
      out.write("        <p class=\"hours\">\r\n");
      out.write("            ");
 
                // Use Java code to get the calculated sleep hours
                int totalHoursSlept = SleepCalculator.calculateSleepHoursForWeek();
                out.print(totalHoursSlept + " hours");
            
      out.write("\r\n");
      out.write("        </p>\r\n");
      out.write("        <div class=\"small-text\">out of 60 hours</div>\r\n");
      out.write("        <div class=\"progress-bar-container\">\r\n");
      out.write("            <div class=\"progress-bar\" style=\"width: ");
      out.print( (totalHoursSlept / 60.0) * 100 );
      out.write("%;\"></div>\r\n");
      out.write("        </div>\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>                <!-- Example card -->\r\n");
      out.write("                <div class=\"data-card\">\r\n");
      out.write("                    <h3>Total Calories This Month</h3>\r\n");
      out.write("                    <p>\r\n");
      out.write("                        ");
 
                            // Use Java code to get the calculated total calories
                            int totalCalories = CaloriesCalculator.calculateTotalCalories();
                            out.print(totalCalories + " calories");
                        
      out.write("\r\n");
      out.write("                    </p>\r\n");
      out.write("                </div>\r\n");
      out.write("            </div> <!-- Close the <div> for graphs here -->\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("</div>\r\n");
      out.write("        <!-- Container for buttons and others -->\r\n");
      out.write("        <div class=\"container\">\r\n");
      out.write("            <button class=\"bm\" onclick=\"redirectToAddRecordPage()\">Add record</button>\r\n");
      out.write("            <button class=\"bm\">View History</button>\r\n");
      out.write("            <button class=\"bm\">Analytics</button>\r\n");
      out.write("        </div>\r\n");
      out.write("    </main>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
